// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/07/2020 20:44:02"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          pipe
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pipe_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] dataa;
reg [7:0] datab;
reg [4:0] rdaddres;
reg [4:0] wraddress;
reg wren;
// wires                                               
wire [15:0] q;

// assign statements (if any)                          
pipe i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.dataa(dataa),
	.datab(datab),
	.q(q),
	.rdaddres(rdaddres),
	.wraddress(wraddress),
	.wren(wren)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	repeat(12)
	begin
		clk = 1'b0;
		clk = #40000 1'b1;
		# 40000;
	end
	clk = 1'b0;
end 

// wren
initial
begin
	wren = 1'b1;
end 
// dataa[ 7 ]
initial
begin
	dataa[7] = 1'b0;
end 
// dataa[ 6 ]
initial
begin
	dataa[6] = 1'b0;
end 
// dataa[ 5 ]
initial
begin
	dataa[5] = 1'b0;
end 
// dataa[ 4 ]
initial
begin
	dataa[4] = 1'b0;
end 
// dataa[ 3 ]
initial
begin
	dataa[3] = 1'b0;
	dataa[3] = #640000 1'b1;
end 
// dataa[ 2 ]
initial
begin
	dataa[2] = 1'b0;
	dataa[2] = #320000 1'b1;
	dataa[2] = #320000 1'b0;
	dataa[2] = #320000 1'b1;
end 
// dataa[ 1 ]
initial
begin
	repeat(3)
	begin
		dataa[1] = 1'b0;
		dataa[1] = #160000 1'b1;
		# 160000;
	end
	dataa[1] = 1'b0;
end 
// dataa[ 0 ]
initial
begin
	repeat(6)
	begin
		dataa[0] = 1'b0;
		dataa[0] = #80000 1'b1;
		# 80000;
	end
	dataa[0] = 1'b0;
end 
// datab[ 7 ]
initial
begin
	datab[7] = 1'b0;
end 
// datab[ 6 ]
initial
begin
	datab[6] = 1'b0;
end 
// datab[ 5 ]
initial
begin
	datab[5] = 1'b0;
end 
// datab[ 4 ]
initial
begin
	datab[4] = 1'b0;
end 
// datab[ 3 ]
initial
begin
	datab[3] = 1'b0;
	datab[3] = #640000 1'b1;
end 
// datab[ 2 ]
initial
begin
	datab[2] = 1'b0;
	datab[2] = #320000 1'b1;
	datab[2] = #320000 1'b0;
	datab[2] = #320000 1'b1;
end 
// datab[ 1 ]
initial
begin
	repeat(3)
	begin
		datab[1] = 1'b0;
		datab[1] = #160000 1'b1;
		# 160000;
	end
	datab[1] = 1'b0;
end 
// datab[ 0 ]
initial
begin
	repeat(6)
	begin
		datab[0] = 1'b0;
		datab[0] = #80000 1'b1;
		# 80000;
	end
	datab[0] = 1'b0;
end 
// rdaddres[ 4 ]
initial
begin
	rdaddres[4] = 1'b0;
end 
// rdaddres[ 3 ]
initial
begin
	rdaddres[3] = 1'b0;
end 
// rdaddres[ 2 ]
initial
begin
	rdaddres[2] = 1'b0;
end 
// rdaddres[ 1 ]
initial
begin
	rdaddres[1] = 1'b0;
end 
// rdaddres[ 0 ]
initial
begin
	rdaddres[0] = 1'b0;
end 
// wraddress[ 4 ]
initial
begin
	wraddress[4] = 1'b0;
end 
// wraddress[ 3 ]
initial
begin
	wraddress[3] = 1'b0;
end 
// wraddress[ 2 ]
initial
begin
	wraddress[2] = 1'b0;
end 
// wraddress[ 1 ]
initial
begin
	wraddress[1] = 1'b0;
end 
// wraddress[ 0 ]
initial
begin
	wraddress[0] = 1'b0;
end 
endmodule

