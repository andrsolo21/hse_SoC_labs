// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/26/2020 15:29:05"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          sum2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sum2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a0;
reg a1;
reg a5;
reg a6;
reg a7;
reg a8;
reg a9;
reg b0;
reg b1;
reg p0;
// wires                                               
wire ledr3;
wire ledr4;
wire ledr5;
wire ledr6;
wire ledr7;
wire ledr8;
wire ledr9;
wire p1;
wire s0;
wire s1;

// assign statements (if any)                          
sum2 i1 (
// port map - connection between master ports and signals/registers   
	.a0(a0),
	.a1(a1),
	.a5(a5),
	.a6(a6),
	.a7(a7),
	.a8(a8),
	.a9(a9),
	.b0(b0),
	.b1(b1),
	.ledr3(ledr3),
	.ledr4(ledr4),
	.ledr5(ledr5),
	.ledr6(ledr6),
	.ledr7(ledr7),
	.ledr8(ledr8),
	.ledr9(ledr9),
	.p0(p0),
	.p1(p1),
	.s0(s0),
	.s1(s1)
);
initial 
begin 
#1000000 $finish;
end 

// a0
initial
begin
	a0 = 1'b0;
	a0 = #640000 1'b1;
end 

// a1
initial
begin
	a1 = 1'b0;
	a1 = #320000 1'b1;
	a1 = #320000 1'b0;
	a1 = #320000 1'b1;
end 

// b0
initial
begin
	repeat(3)
	begin
		b0 = 1'b0;
		b0 = #160000 1'b1;
		# 160000;
	end
	b0 = 1'b0;
end 

// b1
initial
begin
	repeat(6)
	begin
		b1 = 1'b0;
		b1 = #80000 1'b1;
		# 80000;
	end
	b1 = 1'b0;
end 

// p0
initial
begin
	repeat(12)
	begin
		p0 = 1'b0;
		p0 = #40000 1'b1;
		# 40000;
	end
	p0 = 1'b0;
end 
endmodule

